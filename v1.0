from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication, QWidget, QHBoxLayout, QVBoxLayout, QGroupBox, QRadioButton, QPushButton, QLabel,QButtonGroup)
from random import shuffle 
app = QApplication([])#добавление библиотек, названия приложения
 
window = QWidget()

# текущий вопрос из списка сделаем свойством объекта "окно", так мы сможем спокойно менять его из функции:
window.cur_question = -1    # по-хорошему такие переменные должны быть свойствами, 
                            # только надо писать класс, экземпляры которого получат такие свойства, 
                            # но python позволяет создать свойство у отдельно взятого экземпляра

window.score=0
window.total=0

class Question():
    def __init__(self, question, right_answer, wrong1, wrong2, wrong3):
        # все строки надо задать при создании объекта, они запоминаются в свойства
        self.question = question
        self.right_answer = right_answer
        self.wrong1 = wrong1
        self.wrong2 = wrong2
        self.wrong3 = wrong3

questions_list = [] 
questions_list.append(Question('самолёт, у которого 2 крыла', 'биплан', 'триплан', 'моноплан', 'дельтоплан'))
questions_list.append(Question('Пример пикирующего бомбардировщика', 'Ju-87 STUKA', 'Ил-2', 'Ту-154', 'Пе-8'))
questions_list.append(Question('Пример истребителя', 'МиГ-27', 'Ил-28', 'Су-2', 'Ту-95'))#создание вопросов, ответов(на простом языке)
questions_list.append(Question('Какое прозвище было у самолета B-17?','Летающая крепость','Аерокобра','Летающий танк','Белый лебедь'))
questions_list.append(Question('Какой из перечисленных самолётов имеет турбореактивный двигатель?','Ту-160','Ту-95','Ту-4','Bf-110'))
questions_list.append(Question('Какой из перечисленных самолётов является гидропланом?','PBY Catalina','P-51','B-17','Do-217'))

window.setWindowTitle('Memo Card')
 
'''Интерфейс приложения Memory Card'''
btn_OK = QPushButton('Ответить') # кнопка ответа
lb_Question = QLabel('Самый новый Российский пассажирский авиалайнер') # текст вопроса
 
RadioGroupBox = QGroupBox("Варианты ответов") # группа на экране для переключателей с ответами
rbtn_1 = QRadioButton('МС-21') #\
rbtn_2 = QRadioButton('Ту-154')# \ ответы на
rbtn_3 = QRadioButton('Ил-96') # / вопросы
rbtn_4 = QRadioButton('По-2')  #/
 
 # 3 строки снизу создание лэфутов( мне просто лень каждую подписывать)
layout_ans1 = QHBoxLayout()   
layout_ans2 = QVBoxLayout() 
layout_ans3 = QVBoxLayout()

#4 строки снизц создание радио баттонов (опять лень все подписывать)
layout_ans2.addWidget(rbtn_1) 
layout_ans2.addWidget(rbtn_2)
layout_ans3.addWidget(rbtn_3) 
layout_ans3.addWidget(rbtn_4)
 
layout_ans1.addLayout(layout_ans2)
layout_ans1.addLayout(layout_ans3) #эти лэауты размещают все столбцы в одной строке
 
RadioGroupBox.setLayout(layout_ans1) # панель с вариантами ответов 
''''''
#панель результата снизу
AnsGroupBox = QGroupBox("Результат теста")
lb_Result = QLabel('прав ты или нет?') # надпись "правильно" или "неправильно"
lb_Correct = QLabel('ответ будет тут!') # текст правильного ответа

lb_info = QLabel('Ответ будет тут!')
 
layout_res = QVBoxLayout()
layout_res.addWidget(lb_Result, alignment=(Qt.AlignLeft | Qt.AlignTop))
layout_res.addWidget(lb_Correct, alignment=Qt.AlignHCenter, stretch=2)
AnsGroupBox.setLayout(layout_res)
''''''''

layout_line1 = QHBoxLayout() # вопрос
layout_line2 = QHBoxLayout() # варианты ответов или результат теста
layout_line3 = QHBoxLayout() # кнопка "Ответить"
 
layout_line1.addWidget(lb_Question, alignment=(Qt.AlignHCenter | Qt.AlignVCenter))
layout_line2.addWidget(RadioGroupBox)

#ответы
layout_line2.addWidget(AnsGroupBox)  
#RadioGroupBox.hide() # эту панель мы уже видели, скроем, посмотрим, как получилась панель с ответом
AnsGroupBox.hide()

layout_line3.addWidget(btn_OK, stretch=2) #размер кнопки

 
# тут созданные строки размещаются друг под другом:
layout_card = QVBoxLayout()
 
layout_card.addLayout(layout_line1, stretch=2)
layout_card.addLayout(layout_line2, stretch=8)
layout_card.addLayout(layout_line3, stretch=1)
layout_card.setSpacing(15) # пробелы между содержимым


RadioGroup = QButtonGroup() #радио баттоны соединяются
RadioGroup.addButton(rbtn_1)
RadioGroup.addButton(rbtn_2)
RadioGroup.addButton(rbtn_3)
RadioGroup.addButton(rbtn_4)


answers = [rbtn_1, rbtn_2, rbtn_3, rbtn_4]

def ask(q: Question):
    ''' функция записывает значения вопроса и ответов в соответствующие виджеты, 
    при этом варианты ответов распределяются случайным образом'''
    shuffle(answers) # перемешали список из кнопок, теперь на первом месте списка какая-то непредсказуемая кнопка
    answers[0].setText(q.right_answer) # первый элемент списка заполним правильным ответом, остальные - неверными
    answers[1].setText(q.wrong1)
    answers[2].setText(q.wrong2)
    answers[3].setText(q.wrong3)
    lb_Question.setText(q.question) # вопрос
    lb_Correct.setText(q.right_answer) # ответ 
    show_question() # показываем панель вопросов 

''' 
def ask(question, right_answer, wrong1, wrong2, wrong3):
    shuffle(answers)
    answers[0].setText(right_answer)
    answers[1].setText(wrong1)
    answers[2].setText(wrong2)
    answers[3].setText(wrong3)
    lb_Question.setText(question)
    lb_Correct.setText(right_answer) 
    show_question() 
'''
def show_result():
    RadioGroupBox.hide()
    AnsGroupBox.show()
    btn_OK.setText('Следующий вопрос') #функция прячет вопросы и показывает ответ


def show_question(): #функция показывает вопросф
    RadioGroupBox.show()
    AnsGroupBox.hide()
    btn_OK.setText('Ответить')
    RadioGroup.setExclusive(False)
    rbtn_1.setChecked(False)
    rbtn_2.setChecked(False)
    rbtn_3.setChecked(False)
    rbtn_4.setChecked(False)
    RadioGroup.setExclusive(True)


def check_answer(): #проверка ответов
    ''' если выбран какой-то вариант ответа, то надо проверить и показать панель ответов'''
    window.total +=1
    if answers[0].isChecked():
        lb_Result.setText('Правильно!')
        window.score+=1
        show_result()
    else:
        if answers[1].isChecked() or answers[2].isChecked() or answers[3].isChecked():
            lb_Result.setText('Неверно!')
            show_result()
    info='Статистика\n-Общее кол-во вопросов: '+str(window.total)+ '\n-Правильных ответов:'+ str(window.score)
    lb_info.setText(info)
    print('Статистика\n-Всего вопросов: ', window.total,'\n-Правильных ответов: ', window)#ТУТ НАДА ДОПИСАТЬ
    print('Статистика\n-Всего вопросов:',window.total,'\n-Правильных ответов:',window.score)

def next_question(): #следующий вопрос
    ''' задает следующий вопрос из списка '''
  
    window.cur_question = window.cur_question + 1 # переходим к следующему вопросу
    if window.cur_question >= len(questions_list):
        window.cur_question = 0 # если список вопросов закончился - идем сначала
    q = questions_list[window.cur_question] # взяли вопрос
    ask(q) # спросили 

def start_test():
    ''' временная функция, которая позволяет нажатием на кнопку вызывать по очереди
    show_result() либо show_question() '''
    if  btn_OK.text()=='Ответить':
        check_answer()
    else:
        next_question()



next_question()
btn_OK.clicked.connect(start_test)




window.setLayout(layout_card)
window.show()
app.exec()


# ~Красивые самолёты красиво летают~
# Я нз зачем я все это пишу но просто чтобы было 
# Все равно это никто не будет читать ктоме меня)))
